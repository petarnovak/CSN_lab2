Akaike.l1
Akaike <- Ak / tot_Ak
Akaike
# Calculation of the Akaike weights
AIC.df
# Calculation of the Akaike weights
Akaike.df <- rowSums(exp(-1/2*AIC.df[-1]))
Akaike.df
# Calculation of the Akaike weights
Akaike.df <- exp(-1/2*AIC.df[-1]) / rowSums(exp(-1/2*AIC.df[-1]))
Akaike.l1 <- 1 / tot_Ak
Akaike.df
AIC.df
colnames(Akaike.df) <- c("Poisson", "Geometric", "Zeta", "Zeta (gamma = 2)", "Right-truncated Zeta")
Akaike.df
xtable(Akaike.df)
print(xtable(Akaike.df), file = "Table Akaike.tex")
AIC.df[3,5]
AIC.df[[3,5]]
AIC.df[3]
AIC.df
AIC.df[c(3,5)]
rbind(AIC.df[1],Akaike.df)
AIC.df
Akaike.df
# Calculation of the Akaike weights for the best distributions
# (Zeta and Right-truncated Zeta)
Akaike.df <- exp(-1/2*AIC.df[c(4,6)]) / rowSums(exp(-1/2*AIC.df[-1]))
rbind(AIC.df[1],Akaike.df)
lbind(AIC.df[1],Akaike.df)
AIC.df[1]
rbind(AIC.df[1],Akaike.df)
cbind(AIC.df[1],Akaike.df)
# Calculation of the Akaike weights for the best distributions
# (Zeta and Right-truncated Zeta)
Akaike.df <- exp(-1/2*AIC.df[c(4,6)]) / rowSums(exp(-1/2*AIC.df[-1]))
Akaike.df <- cbind(AIC.df[1],Akaike.df)
colnames(Akaike.df) <- c("Language", "Zeta", "Right-truncated Zeta")
Akaike.df
print(xtable(Akaike.df), file = "Table Akaike.tex")
for (i in 1:nrow(source)){
degree_seq <- read.table(source$file[i], header = FALSE)
degree_spec = table(degree_seq)
x <- degree_seq$V1
mle_altmann <- mle(minus_log_like_altmann,
start = list(gamma = 0.01, delta = 0.01),
method = "L-BFGS-B",
lower = c(0.00001,0.00001))
alt.gamma <- attributes(summary(mle_altmann))$coef[1]
alt.delta <- attributes(summary(mle_altmann))$coef[2]
altmann.AIC <- get_AIC(attributes(summary(mle_altmann))$m2logL,2,length(x)) - bestAIC.list[[i]]
altmann.param <- rbind(altmann.param,data.frame(source$language[i],alt.gamma,alt.delta,altmann.AIC))
degree <- as.numeric(names(degree_spec))  # X-axis
vertices <- as.numeric(degree_spec)  # Y-axis
plot(degree, vertices, type = "l", main = source$language[i], lwd = 2,
xlab = "Degree", ylab = "Number of vertices", log = "xy")
z <- 1:max(degree_seq)
altmann_prob <- sapply(z, altmann_dist,gamma=alt.gamma,delta=alt.delta,N=length(x))
lines(z,altmann_prob*nrow(degree_seq),col = "green",lwd = 3)
zetatrunc_prob <- sapply(z, zetatrunc_dist, gamma = param.df$`gamma 2`[i],
k_max = param.df$`k max`[i])
lines(z,zetatrunc_prob*nrow(degree_seq),col = "red",lwd = 3)
legend("topright", legend = c("Data","Altmann","Zeta truncated"),
col = c("black","green","red"), lty = 1, lwd = 2)
}
altmann.param
print(xtable(altmann.param), file = "Table Altmann.tex", digits = c(0, 2, 3, 2))
#Summary table with ALtmann parameters estimated for all languages
altmann.param <- data.frame()
#Summary table with ALtmann parameters estimated for all languages
altmann.param <- data.frame()
for (i in 1:nrow(source)){
degree_seq <- read.table(source$file[i], header = FALSE)
degree_spec = table(degree_seq)
x <- degree_seq$V1
mle_altmann <- mle(minus_log_like_altmann,
start = list(gamma = 2, delta = 0.1),
method = "L-BFGS-B",
lower = c(0.00001,0.00001))
alt.gamma <- attributes(summary(mle_altmann))$coef[1]
alt.delta <- attributes(summary(mle_altmann))$coef[2]
altmann.AIC <- get_AIC(attributes(summary(mle_altmann))$m2logL,2,length(x)) - bestAIC.list[[i]]
altmann.param <- rbind(altmann.param,data.frame(source$language[i],alt.gamma,alt.delta,altmann.AIC))
degree <- as.numeric(names(degree_spec))  # X-axis
vertices <- as.numeric(degree_spec)  # Y-axis
plot(degree, vertices, type = "l", main = source$language[i], lwd = 2,
xlab = "Degree", ylab = "Number of vertices", log = "xy")
z <- 1:max(degree_seq)
altmann_prob <- sapply(z, altmann_dist,gamma=alt.gamma,delta=alt.delta,N=length(x))
lines(z,altmann_prob*nrow(degree_seq),col = "green",lwd = 3)
zetatrunc_prob <- sapply(z, zetatrunc_dist, gamma = param.df$`gamma 2`[i],
k_max = param.df$`k max`[i])
lines(z,zetatrunc_prob*nrow(degree_seq),col = "red",lwd = 3)
legend("topright", legend = c("Data","Altmann","Zeta truncated"),
col = c("black","green","red"), lty = 1, lwd = 2)
}
#Summary table with ALtmann parameters estimated for all languages
altmann.param <- data.frame()
for (i in 1:nrow(source)){
degree_seq <- read.table(source$file[i], header = FALSE)
degree_spec = table(degree_seq)
x <- degree_seq$V1
mle_altmann <- mle(minus_log_like_altmann,
start = list(gamma = 2, delta = 0.1),
method = "L-BFGS-B",
lower = c(0.0001,0.0001))
alt.gamma <- attributes(summary(mle_altmann))$coef[1]
alt.delta <- attributes(summary(mle_altmann))$coef[2]
altmann.AIC <- get_AIC(attributes(summary(mle_altmann))$m2logL,2,length(x)) - bestAIC.list[[i]]
altmann.param <- rbind(altmann.param,data.frame(source$language[i],alt.gamma,alt.delta,altmann.AIC))
degree <- as.numeric(names(degree_spec))  # X-axis
vertices <- as.numeric(degree_spec)  # Y-axis
plot(degree, vertices, type = "l", main = source$language[i], lwd = 2,
xlab = "Degree", ylab = "Number of vertices", log = "xy")
z <- 1:max(degree_seq)
altmann_prob <- sapply(z, altmann_dist,gamma=alt.gamma,delta=alt.delta,N=length(x))
lines(z,altmann_prob*nrow(degree_seq),col = "green",lwd = 3)
zetatrunc_prob <- sapply(z, zetatrunc_dist, gamma = param.df$`gamma 2`[i],
k_max = param.df$`k max`[i])
lines(z,zetatrunc_prob*nrow(degree_seq),col = "red",lwd = 3)
legend("topright", legend = c("Data","Altmann","Zeta truncated"),
col = c("black","green","red"), lty = 1, lwd = 2)
}
altmann.param
AIC.df
# Calculation of the new Akaike weights table, adding the Altmann distribution
AIC.df[c(4,6)]
altmann.param[4]
# Calculation of the new Akaike weights table, adding the Altmann distribution
Akaike.alt.df <- cbind(AIC.df[c(4,6)],altmann.param[4])
Akaike.alt.df
# Calculation of the new Akaike weights table, adding the Altmann distribution
Akaike.alt.df <- cbind(AIC.df[-1],altmann.param[4])
Akaike.alt.df
Akaike.alt.df[Akaike.alt.df$"altmann.AIC"<0]
Akaike.alt.df$"altmann.AIC"<0
# Calculation of the new Akaike weights table, adding the Altmann distribution
Akaike.alt.df <- cbind(AIC.df[-1],altmann.param[4])
negative_Altmann <- Akaike.alt.df$"altmann.AIC" < 0
Akaike.alt.df[negative_Altmann, 1:5] <- Akaike.alt.df[negative_Altmann, 1:5] -
Akaike.alt.df$"altmann.AIC"[negative_Altmann]
Akaike.alt.df
Akaike.alt.df[Akaike.alt.df$"altmann.AIC" < 0] <- 0
Akaike.alt.df
# Calculation of the new Akaike weights table, adding the Altmann distribution
Akaike.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
negative_Altmann <- Akaike.alt.df$"altmann.AIC" < 0 #rows for which Altmann is the best model
Akaike.alt.df[negative_Altmann, 1:5] <- Akaike.alt.df[negative_Altmann, 1:5] -
Akaike.alt.df$"altmann.AIC"[negative_Altmann] #update AIC differences
Akaike.alt.df$"altmann.AIC"[Akaike.alt.df$"altmann.AIC" < 0] <- 0
Akaike.alt.df
Akaike.alt.df <- cbind(AIC.df[1],Akaike.df) #add languages column
colnames(Akaike.alt.df) <- c("Language", "Zeta", "Right-truncated Zeta","Altmann")
Akaike.alt.df
AIC.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
negative_Altmann <- AIC.alt.df$"altmann.AIC" < 0 #rows for which Altmann is the best model
AIC.alt.df[negative_Altmann, 1:5] <- AIC.alt.df[negative_Altmann, 1:5] -
AIC.alt.df$"altmann.AIC"[negative_Altmann] #update AIC differences
AIC.alt.df$"altmann.AIC"[AIC.alt.df$"altmann.AIC" < 0] <- 0 #update Altmann column
AIC.alt.df[c(4,5.6)]
AIC.alt.df[c(4,5,6)]
AIC.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
negative_Altmann <- AIC.alt.df$"altmann.AIC" < 0 #rows for which Altmann is the best model
AIC.alt.df[negative_Altmann, 1:5] <- AIC.alt.df[negative_Altmann, 1:5] -
AIC.alt.df$"altmann.AIC"[negative_Altmann] #update AIC differences
AIC.alt.df$"altmann.AIC"[AIC.alt.df$"altmann.AIC" < 0] <- 0 #update Altmann column
Akaike.alt.df <- exp(-1/2*AIC.alt.df[c(4,5,6)]) / rowSums(exp(-1/2*AIC.alt.df)) #create new Akaike table
Akaike.alt.df <- cbind(AIC.df[1],Akaike.alt.df) #add languages column
colnames(Akaike.alt.df) <- c("Language", "Zeta", "Right-truncated Zeta","Altmann")
Akaike.alt.df
print(xtable(Akaike.df), file = "Table Akaike with Altmann.tex")
View(Akaike.df)
Akaike.alt.df
print(xtable(Akaike.alt.df), file = "Table Akaike with Altmann.tex")
AIC.alt.df
AIC.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
negative_Altmann <- AIC.alt.df$"altmann.AIC" < 0 #rows for which Altmann is the best model
AIC.alt.df[negative_Altmann, 1:5] <- AIC.alt.df[negative_Altmann, 1:5] -
AIC.alt.df$"altmann.AIC"[negative_Altmann] #update AIC differences
AIC.alt.df$"altmann.AIC"[AIC.alt.df$"altmann.AIC" < 0] <- 0 #update Altmann column
Akaike.alt.df <- exp(-1/2*AIC.alt.df[c(3,5,6)]) / rowSums(exp(-1/2*AIC.alt.df)) #create new Akaike table
Akaike.alt.df <- cbind(AIC.df[1],Akaike.alt.df) #add languages column
colnames(Akaike.alt.df) <- c("Language", "Zeta", "Right-truncated Zeta","Altmann")
Akaike.alt.df
print(xtable(Akaike.alt.df), file = "Table Akaike with Altmann.tex")
#Summary table with ALtmann parameters estimated for all languages
altmann.param <- data.frame()
for (i in 1:nrow(source)){
degree_seq <- read.table(source$file[i], header = FALSE)
degree_spec = table(degree_seq)
x <- degree_seq$V1
mle_altmann <- mle(minus_log_like_altmann,
start = list(gamma = 2, delta = 0.1),
method = "L-BFGS-B",
lower = c(0.0001,0.0001))
alt.gamma <- attributes(summary(mle_altmann))$coef[1]
alt.delta <- attributes(summary(mle_altmann))$coef[2]
altmann.AIC <- get_AIC(attributes(summary(mle_altmann))$m2logL,2,length(x)) - bestAIC.list[[i]]
altmann.param <- rbind(altmann.param,data.frame(source$language[i],alt.gamma,alt.delta,altmann.AIC))
degree <- as.numeric(names(degree_spec))  # X-axis
vertices <- as.numeric(degree_spec)  # Y-axis
plot(degree, vertices, type = "l", main = source$language[i], lwd = 2,
xlab = "Degree", ylab = "Number of vertices", log = "xy")
z <- 1:max(degree_seq)
altmann_prob <- sapply(z, altmann_dist,gamma=alt.gamma,delta=alt.delta,N=length(x))
lines(z,altmann_prob*nrow(degree_seq),col = "#D55E00",lwd = 3)
zetatrunc_prob <- sapply(z, zetatrunc_dist, gamma = param.df$`gamma 2`[i],
k_max = param.df$`k max`[i])
lines(z,zetatrunc_prob*nrow(degree_seq),col = "#56B4E9",lwd = 3)
legend("topright", legend = c("Data","Altmann","Zeta truncated"),
col = c("black","#D55E00","#56B4E9"), lty = 1, lwd = 2)
}
library(xtable)
require(stats4) # for MLE
require(VGAM) # for the Riemann-zeta function
# Function to create the initial summary table
write_table <- function(label,file,df) {
# load data from file
degree_sequence = read.table(file, header = FALSE)
# create data frame with data needed
df <- rbind(df,data.frame(label, length(degree_sequence$V1), max(degree_sequence$V1),
sum(degree_sequence$V1)/length(degree_sequence$V1),
length(degree_sequence$V1)/sum(degree_sequence$V1)))
return(df)
}
# Geometric distribution
minus_log_like_geo <- function(p){
-(sum(x)-length(x)) * log(1-p) - length(x) * log(p)
}
# Poisson distribution
minus_log_like_pois <- function(lambda){
C <- 0
for (i in 1:length(x)) {
C = C + sum(log(2:x[i]))
}
- sum(x) * log(lambda) + length(x) * (lambda + log(1-exp(1)^(-lambda))) + C
}
# Zeta distribution
minus_log_like_zeta <- function(gamma){
length(x) * log(zeta(gamma)) + gamma * sum(log(x))
}
# Zeta (gamma=2) distribution
minus_log_like_zeta2 <- function(){
mle <- length(x) * log(pi^2/6) + 2 * sum(log(x))
return(mle)
}
# Right-truncated zeta distribution
minus_log_like_zeta_trunc <- function(gamma){
length(x) * log(sum((1:max(x))^(-gamma))) + gamma * sum(log(x))
}
# Function to calculate the mle useful parameters
mle_calc <- function(p_start,lambda_start,x){
# Geometric distribution
mle_geo <- mle(minus_log_like_geo,
start = list(p = p_start),
method = "L-BFGS-B",
lower = c(0.01),
upper = c(0.99))
geo_par <- c(attributes(summary(mle_geo))$coef,attributes(summary(mle_geo))$m2logL) #extract estimated p and -2*Log_likelihood
# Poisson distribution
mle_pois <- mle(minus_log_like_pois,
start = list(lambda = lambda_start),
method = "L-BFGS-B",
lower = c(1.0000001))
pois_par <- c(attributes(summary(mle_pois))$coef,attributes(summary(mle_pois))$m2logL) #extract estimated lambda and -2*Log_likelihood
# Zeta distribution
mle_zeta <- mle(minus_log_like_zeta,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_par <- c(attributes(summary(mle_zeta))$coef,attributes(summary(mle_zeta))$m2logL) #extract estimated gamma and -2*Log_likelihood
# Right-truncated zeta distribution
mle_zeta_trunc <- mle(minus_log_like_zeta_trunc,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_trunc_par <- c(attributes(summary(mle_zeta_trunc))$coef, attributes(summary(mle_zeta_trunc))$m2logL) #extract estimated gamma and -2*Log_likelihood
# create dataframe with extracted data
df <- data.frame(pois_par,geo_par,zeta_par,zeta_trunc_par)
colnames(df) <- NULL
return(df)
}
# AIC
get_AIC <- function(m2logL,K,N){
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
# Function to create the AIC table and  to store the best AIC
AIC_calc <- function(label, m2logL.list,df,x){
AIC.list <- sapply(m2logL.list,get_AIC,K=1,N=length(x)) #row of the table
mle_zeta2 <- 2*minus_log_like_zeta2() #calculate -2*Log_likelihood for Zeta distribution with gamma=2
AIC.list <- append(AIC.list,get_AIC(mle_zeta2,0,length(x)),after = 3) #add AIC for Zeta distribution with gamma=2 to table row
best.AIC <- min(AIC.list) #best AIC
AIC.list <- AIC.list-best.AIC #calculate difference from best AIC
df <- rbind(df,data.frame(label,t(AIC.list)))
return(list(AICdf = df, AICbest = best.AIC))
}
# PLOTS -----------------------------------------
# Probability functions, necessary to plot the distributions
#Displaced geometric
geo_dist <- function(p,k){
q <- (1-p)^(k-1)*p
return(q)
}
#Displaced poisson
pois_dist <- function(lambda,k){
p <- (lambda^k) * exp(-lambda) / (factorial(k) * (1 - exp(-lambda)))
}
#Zeta truncated
zetatrunc_dist <- function(k_max,gamma,k){
k^(-gamma)/(sum((1:k_max)^(-gamma)))
}
# Function to create the plots
full_plot <- function(i,x,label,n.samples,deg_spec,df,scale){
degree <- as.numeric(names(deg_spec))  # X-axis
vertices <- as.numeric(deg_spec)  # Y-axis
plot(degree, vertices, type = "l", main = label, lwd = 2,
xlab = "Degree", ylab = "Number of vertices", log = scale) #plot of real data, use the appropriate scale
geo_prob <- sapply(x, geo_dist,p=df$p[i])
lines(x,geo_prob*n.samples,col = "blue",lwd = 2) #plot of geometric distribution
pois_prob <- sapply(x, pois_dist,lambda=df$lambda[i])
lines(x,pois_prob*n.samples,col = "green",lwd = 2) #plot of Poisson distribution
zeta_prob <- sapply(x, dzeta, shape = df$`gamma 1`[i]-1)
lines(x,zeta_prob*n.samples,col = "orange",lwd = 2) #plot of Zeta distribution
zeta2_prob <- sapply(x, dzeta, shape = 1)
lines(x,zeta2_prob*n.samples,col = "magenta",lwd = 2) #plot of Zeta (gamma = 2) distribution
zetatrunc_prob <- sapply(x, zetatrunc_dist, gamma = df$`gamma 2`[i],
k_max = df$`k max`[i])
lines(x,zetatrunc_prob*n.samples,col = "red",lwd = 2) #plot of right-truncated Zeta distribution
}
# Code for language networks
# Import the data and create the initial summary table
source = read.table("list_in.txt",
header = TRUE,               # this is to indicate the first line of the file contains the names of the columns instead of the real data
as.is = c("language","file") # this is need to have the cells treated as real strings and not as categorial data.
)
lang.df <- data.frame() #Summary table with all languages and important values
# table with summary of the properties of the degree sequences for each language
for (x in 1:nrow(source)) {
lang.df <- write_table(source$language[x], source$file[x],lang.df)
}
colnames(lang.df) <- c("Language", "N", "Maximum degree", "M/N", "N/M")
lang.df
print(xtable(lang.df), file = "Table languages.tex")
# Tables with estimated parameters and AIC
param.df <- data.frame() #table with best parameters
AIC.df <- data.frame() #AIC table
bestAIC.list <- list() #list with best AIC for every language
# for each language
for (i in 1:nrow(source)){
x <- read.table(source$file[i], header = FALSE)$V1 # load degree sequences data for the current language
param.list <- mle_calc(lang.df$"N/M"[i],lang.df$"M/N"[i],x)
param.df <- rbind(param.df,data.frame(source$language[i], param.list[1,],max(x)))
AIC <- AIC_calc(source$language[i],param.list[3,],AIC.df,x)
AIC.df <- AIC$AICdf
bestAIC.list[i] <- AIC$AICbest
}
colnames(param.df) <- c("Language", "lambda", "p", "gamma 1","gamma 2","k max")
colnames(AIC.df) <- c("Language", "1", "2", "3", "4", "5")
param.df
AIC.df
print(xtable(param.df), file = "Table Parameters.tex")
print(xtable(AIC.df), file = "Table AIC.tex")
# Plot
for (i in 1:nrow(source)){
degree_sequence = read.table(source$file[i], header = FALSE)
degree_spectrum = table(degree_sequence)
x <- 1:max(degree_sequence)
#plot data and all models
full_plot(i, x, source$language[i], nrow(degree_sequence), degree_spectrum, param.df,"xy")
#add legend
legend("topright",
legend = c("Data","Geometric", "Poisson", "Zeta", "Zeta (Lambda=2)", "Zeta truncated"),
col = c("black","blue","green","orange","magenta","red"),
lty = 1, lwd = 2)
}
# Calculation of the Akaike weights for the best distributions
# (Zeta and Right-truncated Zeta)
Akaike.df <- exp(-1/2*AIC.df[c(4,6)]) / rowSums(exp(-1/2*AIC.df[-1]))
Akaike.df <- cbind(AIC.df[1],Akaike.df)
colnames(Akaike.df) <- c("Language", "Zeta", "Right-truncated Zeta")
Akaike.df
print(xtable(Akaike.df), file = "Table Akaike.tex")
# Samples from discrete distributions
# Import the data and create the initial summary table
source.prob = read.table("list_random_samples.txt",
header = TRUE,               # this is to indicate the first line of the file contains the names of the columns instead of the real data
as.is = c("distribution","file") # this is need to have the cells treated as real strings and not as categorial data.
)
prob.df <- data.frame() #Summary table with all languages and important values
for (i in 1:nrow(source.prob)) {
prob.df <- write_table(source.prob$distribution[i], source.prob$file[i],prob.df)
}
colnames(prob.df) <- c("Distribution", "N", "Maximum degree", "M/N", "N/M")
prob.df
print(xtable(prob.df), file = "Table sample.tex")
# Tables with estimated parameters and AIC
param.sample.df <- data.frame() #table with best parameters
AIC.sample.df <- data.frame() #AIC table
bestAIC.sample.list <- list()#list with best AIC for every distribution
# (The cycle is quite slow, mainly because of the Gamma 1.5 distribution)
for (i in 1:nrow(source.prob)){
x <- read.table(source.prob$file[i], header = FALSE)$V1
param.list <- mle_calc(prob.df$"N/M"[i],prob.df$"M/N"[i],x)
param.sample.df <- rbind(param.sample.df,data.frame(prob.df$Distribution[i], param.list[1,],max(x)))
AIC <- AIC_calc(prob.df$Distribution[i],param.list[3,],AIC.sample.df,x)
AIC.sample.df <- AIC$AICdf
bestAIC.sample.list[i] <- AIC$AICbest
}
colnames(param.sample.df) <- c("Distribution", "lambda", "p", "gamma 1","gamma 2","k max")
colnames(AIC.sample.df) <- c("Distribution", "1", "2", "3", "4","5")
param.sample.df
AIC.sample.df
print(xtable(param.sample.df), file = "Table Parameters sample.tex")
print(xtable(AIC.sample.df), file = "Table AIC sample.tex")
# Plot
# The Zeta 1.5 distribution is REALLY slow,
# to make the code faster we do not plot it,
# to plot it, it is sufficient to delete [-6] in the next line
for (i in c(1:nrow(source.prob))[-6]){
# choice of different scales for plotting the geometric and the zeta distributions
if(i<6){
scale = "y"
}else{
scale = "xy"
}
degree_sequence = read.table(source.prob$file[i], header = FALSE)
degree_spectrum = table(degree_sequence)
x <- 1:max(degree_sequence)
full_plot(i, x, source.prob$distribution[i], nrow(degree_sequence), degree_spectrum, param.sample.df,scale)
legend("topright",
legend = c("Data","Geometric", "Poisson", "Zeta", "Zeta (Lambda=2)", "Zeta truncated"),
col = c("black","blue","green","orange","magenta","red"),
lty = 1, lwd = 2)
}
# ADDITIONAL WORK
# Altmann distribution
altmann_dist <- function(gamma,delta,k,N){
k^(-gamma) * exp(-delta * k) * (1/sum((1:N)^(-gamma) * exp(-delta * (1:N))))
}
# Altmann log-likelihood
minus_log_like_altmann <- function(gamma,delta){
gamma * sum(log(x)) + delta * sum(x) + length(x)*log(sum(((1:length(x))^(-gamma)*exp(-delta*(1:length(x))))))
}
#Summary table with ALtmann parameters estimated for all languages
altmann.param <- data.frame()
for (i in 1:nrow(source)){
degree_seq <- read.table(source$file[i], header = FALSE)
degree_spec = table(degree_seq)
x <- degree_seq$V1
mle_altmann <- mle(minus_log_like_altmann,
start = list(gamma = 2, delta = 0.1),
method = "L-BFGS-B",
lower = c(0.0001,0.0001))
alt.gamma <- attributes(summary(mle_altmann))$coef[1]
alt.delta <- attributes(summary(mle_altmann))$coef[2]
altmann.AIC <- get_AIC(attributes(summary(mle_altmann))$m2logL,2,length(x)) - bestAIC.list[[i]]
altmann.param <- rbind(altmann.param,data.frame(source$language[i],alt.gamma,alt.delta,altmann.AIC))
degree <- as.numeric(names(degree_spec))  # X-axis
vertices <- as.numeric(degree_spec)  # Y-axis
plot(degree, vertices, type = "l", main = source$language[i], lwd = 2,
xlab = "Degree", ylab = "Number of vertices", log = "xy")
z <- 1:max(degree_seq)
altmann_prob <- sapply(z, altmann_dist,gamma=alt.gamma,delta=alt.delta,N=length(x))
lines(z,altmann_prob*nrow(degree_seq),col = "#D55E00",lwd = 3)
zetatrunc_prob <- sapply(z, zetatrunc_dist, gamma = param.df$`gamma 2`[i],
k_max = param.df$`k max`[i])
lines(z,zetatrunc_prob*nrow(degree_seq),col = "#56B4E9",lwd = 3)
legend("topright", legend = c("Data","Altmann","Zeta truncated"),
col = c("black","#D55E00","#56B4E9"), lty = 1, lwd = 2)
}
colnames(altmann.param) <- c("Language", "gamma", "delta", "Alt.AIC-best.AIC")
altmann.param
print(xtable(altmann.param), file = "Table Altmann.tex", digits = c(0, 2, 3, 2))
AIC.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
negative_Altmann <- AIC.alt.df$"altmann.AIC" < 0 #rows for which Altmann is the best model
AIC.alt.df[negative_Altmann, 1:5] <- AIC.alt.df[negative_Altmann, 1:5] -
AIC.alt.df$"altmann.AIC"[negative_Altmann] #update AIC differences
AIC.alt.df$"altmann.AIC"[AIC.alt.df$"altmann.AIC" < 0] <- 0 #update Altmann column
AIC.alt.df
# Calculation of the new Akaike weights table, adding the Altmann distribution
AIC.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
negative_Altmann <- AIC.alt.df$"altmann.AIC" < 0 #rows for which Altmann is the best model
AIC.alt.df[negative_Altmann, 1:5] <- AIC.alt.df[negative_Altmann, 1:5] -
AIC.alt.df$"altmann.AIC"[negative_Altmann] #update AIC differences
AIC.alt.df$"altmann.AIC"[AIC.alt.df$"altmann.AIC" < 0] <- 0 #update Altmann column
# Calculation of the new Akaike weights table, adding the Altmann distribution
AIC.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
negative_Altmann <- AIC.alt.df$"altmann.AIC" < 0 #rows for which Altmann is the best model
AIC.alt.df[negative_Altmann, 1:5] <- AIC.alt.df[negative_Altmann, 1:5] -
AIC.alt.df$"altmann.AIC"[negative_Altmann] #update AIC differences
AIC.alt.df$"altmann.AIC"[AIC.alt.df$"altmann.AIC" < 0] <- 0 #update Altmann column
AIC.alt.df
colnames(AIC.alt.df)[6]
colnames(AIC.alt.df)[6] <- "6"
AIC.alt.df
# Calculation of the new Akaike weights table, adding the Altmann distribution
AIC.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
AIC.alt.df
altmann.param
AIC.alt.df[6]
# Calculation of the new Akaike weights table, adding the Altmann distribution
AIC.alt.df <- cbind(AIC.df[-1],altmann.param[4]) #create initial table
colnames(AIC.alt.df)[6] <- "6"
negative_Altmann <- AIC.alt.df[6] < 0 #rows for which Altmann is the best model
AIC.alt.df[negative_Altmann, 1:5] <- AIC.alt.df[negative_Altmann, 1:5] -
AIC.alt.df$"6"[negative_Altmann] #update AIC differences
AIC.alt.df$"6"[AIC.alt.df[6] < 0] <- 0 #update Altmann column
Akaike.alt.df <- exp(-1/2*AIC.alt.df[c(3,5,6)]) / rowSums(exp(-1/2*AIC.alt.df)) #create new Akaike table
Akaike.alt.df <- cbind(AIC.df[1],Akaike.alt.df) #add languages column
colnames(Akaike.alt.df) <- c("Language", "Zeta", "Right-truncated Zeta","Altmann")
Akaike.alt.df
print(xtable(Akaike.alt.df), file = "Table Akaike with Altmann.tex")
