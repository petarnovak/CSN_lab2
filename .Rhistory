lang.df <- write_table(source$language[x], source$file[x],lang.df)
}
colnames(lang.df) <- c("Language", "N", "Maximum degree", "M/N", "N/M")
#Table with all languages and some important values
lang.df
print(xtable(lang.df), file = "Table 1.tex")
# 2: Visualization
# Function to plot the degree sequence of a given language
degree_plot <- function(language,file){
degree_sequence = read.table(file, header = FALSE)
degree_spectrum = table(degree_sequence)
barplot(degree_spectrum, main = language, xlab = "degree", ylab = "Number of vertices", log = "y")
}
par(ask = TRUE) #We stop at each plot
for (x in 1:nrow(source)){
degree_plot(source$language[x], source$file[x])
}
# 2: Visualization
# Function to plot the degree sequence of a given language
degree_plot <- function(language,file){
degree_sequence = read.table(file, header = FALSE)
degree_spectrum = table(degree_sequence)
barplot(degree_spectrum, main = language, xlab = "degree", ylab = "Number of vertices", log = "xy")
}
par(ask = TRUE) #We stop at each plot
for (x in 1:nrow(source)){
degree_plot(source$language[x], source$file[x])
}
# 2: Visualization
# Function to plot the degree sequence of a given language
degree_plot <- function(language,file){
degree_sequence = read.table(file, header = FALSE)
degree_spectrum = table(degree_sequence)
barplot(degree_spectrum, main = language, xlab = "degree", ylab = "Number of vertices")
}
par(ask = TRUE) #We stop at each plot
for (x in 1:nrow(source)){
degree_plot(source$language[x], source$file[x])
}
# 2: Visualization
# Function to plot the degree sequence of a given language
degree_plot <- function(language,file){
degree_sequence = read.table(file, header = FALSE)
degree_spectrum = table(degree_sequence)
barplot(degree_spectrum, main = language, xlab = "degree", ylab = "Number of vertices", log = "y")
}
par(ask = TRUE) #We stop at each plot
for (x in 1:nrow(source)){
degree_plot(source$language[x], source$file[x])
}
C <- 0
for (i in 1:length(x)) {
C = C + sum(log(2:x[i]))
}
- sum(x) * log(lambda) + length(x) * (lambda + log(1-exp(1)^(-lambda))) + C
# 3: Log-likelihood function
require(stats4) # for MLE
require(VGAM) # for the Riemann-zeta function
# Geometric distribution
minus_log_like_geo <- function(p){
-(sum(x)-length(x)) * log(1-p) - length(x) * log(p)
}
# Poisson distribution
minus_log_like_pois <- function(lambda){
C <- 0
for (i in 1:length(x)) {
C = C + sum(log(2:x[i]))
}
- sum(x) * log(lambda) + length(x) * (lambda + log(1-exp(1)^(-lambda))) + C
}
# Zeta distribution
minus_log_like_zeta <- function(gamma){
length(x) * log(zeta(gamma)) + gamma * sum(log(x))
}
# Zeta (gamma=2) distribution
minus_log_like_zeta2 <- function(){
mle <- length(x) * log(pi^2/6) + 2 * sum(log(x))
return(mle)
}
# Right-truncated zeta distribution
minus_log_like_zeta_trunc <- function(gamma){
length(x) * log(sum((1:max(x))^(-gamma))) + gamma * sum(log(x))
}
# Function to calculate the mle useful parameters
mle_calc <- function(p,lambda,x){
mle_geo <- mle(minus_log_like_geo,
start = list(p = p),
method = "L-BFGS-B",
lower = c(0.01),
upper = c(0.99))
geo_par <- c(attributes(summary(mle_geo))$coef[1],attributes(summary(mle_geo))$m2logL)
mle_pois <- mle(minus_log_like_pois,
start = list(lambda = lambda),
method = "L-BFGS-B",
lower = c(1.0000001))
pois_par <- c(attributes(summary(mle_pois))$coef[1],attributes(summary(mle_pois))$m2logL)
mle_zeta <- mle(minus_log_like_zeta,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_par <- c(attributes(summary(mle_zeta))$coef[1],attributes(summary(mle_zeta))$m2logL)
mle_zeta_trunc <- mle(minus_log_like_zeta_trunc,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_trunc_par <- c(attributes(summary(mle_zeta_trunc))$coef[1],
attributes(summary(mle_zeta_trunc))$m2logL)
df <- data.frame(pois_par,geo_par,zeta_par,zeta_trunc_par)
colnames(df) <- NULL
return(df)
}
# Function to calculate the mle useful parameters
mle_calc <- function(p,lambda,x){
mle_geo <- mle(minus_log_like_geo,
start = list(p = p),
method = "L-BFGS-B",
lower = c(0.0001),
upper = c(0.9999))
geo_par <- c(attributes(summary(mle_geo))$coef[1],attributes(summary(mle_geo))$m2logL)
mle_pois <- mle(minus_log_like_pois,
start = list(lambda = lambda),
method = "L-BFGS-B",
lower = c(1.0000001))
pois_par <- c(attributes(summary(mle_pois))$coef[1],attributes(summary(mle_pois))$m2logL)
mle_zeta <- mle(minus_log_like_zeta,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_par <- c(attributes(summary(mle_zeta))$coef[1],attributes(summary(mle_zeta))$m2logL)
mle_zeta_trunc <- mle(minus_log_like_zeta_trunc,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_trunc_par <- c(attributes(summary(mle_zeta_trunc))$coef[1],
attributes(summary(mle_zeta_trunc))$m2logL)
df <- data.frame(pois_par,geo_par,zeta_par,zeta_trunc_par)
colnames(df) <- NULL
return(df)
}
# Functions to calculate the AIC
get_AIC <- function(m2logL,K,N){
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
AIC_calc <- function(label, m2logL.list,df,x){
AIC.list <- sapply(m2logL.list,get_AIC,K=1,N=length(x))
mle_zeta2 <- 2*minus_log_like_zeta2()
AIC.list <- append(AIC.list,get_AIC(mle_zeta2,0,length(x)),after = 3)
best.AIC <- min(AIC.list)
AIC.list <- AIC.list-best.AIC
df <- rbind(df,data.frame(label,t(AIC.list)))
return(df)
}
param.df <- data.frame() #table with best parameters
AIC.df <- data.frame() #AIC table
for (i in 1:nrow(source)){
x <- read.table(source$file[i], header = FALSE)$V1
param.list <- mle_calc(lang.df$"N/M"[i],lang.df$"M/N"[i],x)
param.df <- rbind(param.df,data.frame(source$language[i], param.list[1,],max(x)))
AIC.df <- AIC_calc(source$language[i],param.list[2,],AIC.df,x)
}
colnames(param.df) <- c("Language", "lambda", "p", "gamma 1","gamma 2","k max")
colnames(AIC.df) <- c("Language", "1", "2", "3", "4", "5")
param.df
print(xtable(param.df), file = "Table Parametri.tex")
AIC.df
print(xtable(AIC.df), file = "Table AIC.tex")
# 6: Samples from discrete distribution
folder_path <- "./samples_from_discrete_distributions/data"
files <- list.files(path = folder_path, full.names = TRUE)
prob_list <- c("geo 0.05","geo 0.1","geo 0.2","geo 0.4","geo 0.8","zeta 1.5","zeta 2.5",
"zeta 2","zeta 3.5","zeta 3")
# Introduction
prob.df <- data.frame()
for (x in 1:length(files)) {
prob.df <- write_table(prob_list[x], files[x],prob.df)
}
colnames(prob.df) <- c("Distribution", "N", "Maximum degree", "M/N", "N/M")
prob.df
# Visualization
for (i in 1:length(files)){
degree_sequence = read.table(files[i], header = FALSE)
degree_spectrum = table(degree_sequence)
barplot(degree_spectrum, main = paste("Distribution :",prob_list[i]), xlab = "degree", ylab = "number of vertices", log = "y")
}
param.sample.df <- data.frame() #table with best parameters
AIC.sample.df <- data.frame() #AIC table
for (i in 1:length(files)){
x <- read.table(files[i], header = FALSE)$V1
param.list <- mle_calc(prob.df$"N/M"[i],prob.df$"M/N"[i],x)
param.sample.df <- rbind(param.sample.df,data.frame(prob.df$Distribution[i], param.list[1,],max(x)))
AIC.sample.df <- AIC_calc(prob.df$Distribution[i],param.list[2,],AIC.sample.df)
}
# Functions to calculate the AIC
get_AIC <- function(m2logL,K,N){
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
AIC_calc <- function(label, m2logL.list,df,x){
AIC.list <- sapply(m2logL.list,get_AIC,K=1,N=length(x))
mle_zeta2 <- 2*minus_log_like_zeta2()
AIC.list <- append(AIC.list,get_AIC(mle_zeta2,0,length(x)),after = 3)
best.AIC <- min(AIC.list)
AIC.list <- AIC.list-best.AIC
df <- rbind(df,data.frame(label,t(AIC.list)))
return(df)
}
param.sample.df <- data.frame() #table with best parameters
AIC.sample.df <- data.frame() #AIC table
for (i in 1:length(files)){
x <- read.table(files[i], header = FALSE)$V1
param.list <- mle_calc(prob.df$"N/M"[i],prob.df$"M/N"[i],x)
param.sample.df <- rbind(param.sample.df,data.frame(prob.df$Distribution[i], param.list[1,],max(x)))
AIC.sample.df <- AIC_calc(prob.df$Distribution[i],param.list[2,],AIC.sample.df)
}
# 3: Log-likelihood function
require(stats4) # for MLE
require(VGAM) # for the Riemann-zeta function
# Geometric distribution
minus_log_like_geo <- function(p){
-(sum(x)-length(x)) * log(1-p) - length(x) * log(p)
}
# Poisson distribution
minus_log_like_pois <- function(lambda){
C <- 0
for (i in 1:length(x)) {
C = C + sum(log(2:x[i]))
}
- sum(x) * log(lambda) + length(x) * (lambda + log(1-exp(1)^(-lambda))) + C
}
# Zeta distribution
minus_log_like_zeta <- function(gamma){
length(x) * log(zeta(gamma)) + gamma * sum(log(x))
}
# Zeta (gamma=2) distribution
minus_log_like_zeta2 <- function(){
mle <- length(x) * log(pi^2/6) + 2 * sum(log(x))
return(mle)
}
# Right-truncated zeta distribution
minus_log_like_zeta_trunc <- function(gamma){
length(x) * log(sum((1:max(x))^(-gamma))) + gamma * sum(log(x))
}
# Function to calculate the mle useful parameters
mle_calc <- function(p,lambda,x){
mle_geo <- mle(minus_log_like_geo,
start = list(p = p),
method = "L-BFGS-B",
lower = c(0.00001),
upper = c(0.99999))
geo_par <- c(attributes(summary(mle_geo))$coef[1],attributes(summary(mle_geo))$m2logL)
mle_pois <- mle(minus_log_like_pois,
start = list(lambda = lambda),
method = "L-BFGS-B",
lower = c(1.0000001))
pois_par <- c(attributes(summary(mle_pois))$coef[1],attributes(summary(mle_pois))$m2logL)
mle_zeta <- mle(minus_log_like_zeta,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_par <- c(attributes(summary(mle_zeta))$coef[1],attributes(summary(mle_zeta))$m2logL)
mle_zeta_trunc <- mle(minus_log_like_zeta_trunc,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_trunc_par <- c(attributes(summary(mle_zeta_trunc))$coef[1],
attributes(summary(mle_zeta_trunc))$m2logL)
df <- data.frame(pois_par,geo_par,zeta_par,zeta_trunc_par)
colnames(df) <- NULL
return(df)
}
# Functions to calculate the AIC
get_AIC <- function(m2logL,K,N){
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
AIC_calc <- function(label, m2logL.list,df,x){
AIC.list <- sapply(m2logL.list,get_AIC,K=1,N=length(x))
mle_zeta2 <- 2*minus_log_like_zeta2()
AIC.list <- append(AIC.list,get_AIC(mle_zeta2,0,length(x)),after = 3)
best.AIC <- min(AIC.list)
AIC.list <- AIC.list-best.AIC
df <- rbind(df,data.frame(label,t(AIC.list)))
return(df)
}
param.df <- data.frame() #table with best parameters
AIC.df <- data.frame() #AIC table
# 6: Samples from discrete distribution
folder_path <- "./samples_from_discrete_distributions/data"
files <- list.files(path = folder_path, full.names = TRUE)
prob_list <- c("geo 0.05","geo 0.1","geo 0.2","geo 0.4","geo 0.8","zeta 1.5","zeta 2.5",
"zeta 2","zeta 3.5","zeta 3")
# Introduction
prob.df <- data.frame()
for (x in 1:length(files)) {
prob.df <- write_table(prob_list[x], files[x],prob.df)
}
colnames(prob.df) <- c("Distribution", "N", "Maximum degree", "M/N", "N/M")
prob.df
# Visualization
for (i in 1:length(files)){
degree_sequence = read.table(files[i], header = FALSE)
degree_spectrum = table(degree_sequence)
barplot(degree_spectrum, main = paste("Distribution :",prob_list[i]), xlab = "degree", ylab = "number of vertices", log = "y")
}
param.sample.df <- data.frame() #table with best parameters
AIC.sample.df <- data.frame() #AIC table
for (i in 1:length(files)){
x <- read.table(files[i], header = FALSE)$V1
param.list <- mle_calc(prob.df$"N/M"[i],prob.df$"M/N"[i],x)
param.sample.df <- rbind(param.sample.df,data.frame(prob.df$Distribution[i], param.list[1,],max(x)))
AIC.sample.df <- AIC_calc(prob.df$Distribution[i],param.list[2,],AIC.sample.df)
}
for (i in 1:length(files)){
x <- read.table(files[i], header = FALSE)$V1
param.list <- mle_calc(prob.df$"N/M"[i],prob.df$"M/N"[i],x)
param.sample.df <- rbind(param.sample.df,data.frame(prob.df$Distribution[i], param.list[1,],max(x)))
AIC.sample.df <- AIC_calc(prob.df$Distribution[i],param.list[2,],AIC.sample.df,x)
}
# Poisson distribution
minus_log_like_pois <- function(lambda){
C <- 0
for (i in 1:length(x)) {
C = C + sum(log(2:x[i]))
}
- sum(x) * log(lambda) + length(x) * (lambda + log(1-exp(1)^(-lambda))) + C
}
# Zeta distribution
minus_log_like_zeta <- function(gamma){
length(x) * log(zeta(gamma)) + gamma * sum(log(x))
}
# Zeta (gamma=2) distribution
minus_log_like_zeta2 <- function(){
mle <- length(x) * log(pi^2/6) + 2 * sum(log(x))
return(mle)
}
# Right-truncated zeta distribution
minus_log_like_zeta_trunc <- function(gamma){
length(x) * log(sum((1:max(x))^(-gamma))) + gamma * sum(log(x))
}
# Function to calculate the mle useful parameters
mle_calc <- function(p,lambda,x){
mle_geo <- mle(minus_log_like_geo,
start = list(p = p),
method = "L-BFGS-B",
lower = c(0.01),
upper = c(0.99))
geo_par <- c(attributes(summary(mle_geo))$coef[1],attributes(summary(mle_geo))$m2logL)
mle_pois <- mle(minus_log_like_pois,
start = list(lambda = lambda),
method = "L-BFGS-B",
lower = c(1.0000001))
pois_par <- c(attributes(summary(mle_pois))$coef[1],attributes(summary(mle_pois))$m2logL)
mle_zeta <- mle(minus_log_like_zeta,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_par <- c(attributes(summary(mle_zeta))$coef[1],attributes(summary(mle_zeta))$m2logL)
mle_zeta_trunc <- mle(minus_log_like_zeta_trunc,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_trunc_par <- c(attributes(summary(mle_zeta_trunc))$coef[1],
attributes(summary(mle_zeta_trunc))$m2logL)
df <- data.frame(pois_par,geo_par,zeta_par,zeta_trunc_par)
colnames(df) <- NULL
return(df)
}
param.sample.df <- data.frame() #table with best parameters
AIC.sample.df <- data.frame() #AIC table
for (i in 1:length(files)){
x <- read.table(files[i], header = FALSE)$V1
param.list <- mle_calc(prob.df$"N/M"[i],prob.df$"M/N"[i],x)
param.sample.df <- rbind(param.sample.df,data.frame(prob.df$Distribution[i], param.list[1,],max(x)))
AIC.sample.df <- AIC_calc(prob.df$Distribution[i],param.list[2,],AIC.sample.df,x)
}
colnames(param.sample.df) <- c("Distribution", "lambda", "p", "gamma 1","gamma 2","k max")
colnames(AIC.sample.df) <- c("Distribution", "1", "2", "3", "4","5")
param.sample.df
AIC.sample.df
prob.df$"N/M"[i]
prob.df$"N/M"
# Plots of distributions vs real data
# Probability functions
#Displaced geometric
geo_dist <- function(p,k){
q <- (1-p)^(k-1)*p
return(q)
}
#Displaced poisson
pois_dist <- function(lambda,k){
p <- (lambda^k) * exp(-lambda) / (factorial(k) * (1 - exp(-lambda)))
}
#Zeta truncated
zetatrunc_dist <- function(k_max,gamma,k){
k^(-gamma)/(sum((1:k_max)^(-gamma)))
}
full_plot <- function(i,label,file,df){
degree_sequence = read.table(file, header = FALSE)
degree_spectrum = data.frame(table(degree_sequence))
#VA SISTEMATO, VANNO MESSI I PUNTINI/DELLE LINEE
plot(degree_spectrum$V1,degree_spectrum$Freq/nrow(degree_sequence),main = label,type="l",
ylim = c(10^(-6),1), xlab = "degree", ylab = "Proportion of vertices",log="y")
x <- 1:max(degree_sequence)
geo_prob <- sapply(x, geo_dist,p=df$p[i])
lines(x,geo_prob,type="l",col = "blue")
pois_prob <- sapply(x, pois_dist,lambda=df$lambda[i])
lines(x,pois_prob,type="l",col = "green")
zeta_prob <- sapply(x, dzeta, shape = df$`gamma 1`[i])
lines(x,zeta_prob,type="l",col = "red")
zeta2_prob <- sapply(x, dzeta, shape = 2)
lines(x,zeta2_prob,type="l",col = "magenta")
zetatrunc_prob <- sapply(x, zetatrunc_dist, gamma = df$`gamma 2`[i],
k_max = df$`k max`[i])
lines(x,zetatrunc_prob,type="l",col = "orange")
legend("topright", legend = c("Geometric", "Poisson", "Zeta", "Zeta (Lambda=2)", "Zeta truncated"),
col = c("blue","green","red","magenta","orange"), lty = 1, lwd = 2)
}
for (x in 1:nrow(source)){
full_plot(x,source$language[x], source$file[x],param.df)
}
# Function to calculate the mle useful parameters
mle_calc <- function(p,lambda,x){
mle_geo <- mle(minus_log_like_geo,
start = list(p = p),
method = "L-BFGS-B",
lower = c(0.01),
upper = c(0.99))
geo_par <- c(attributes(summary(mle_geo))$coef[1],attributes(summary(mle_geo))$m2logL)
mle_pois <- mle(minus_log_like_pois,
start = list(lambda = lambda),
method = "L-BFGS-B",
lower = c(1.0000001))
pois_par <- c(attributes(summary(mle_pois))$coef[1],attributes(summary(mle_pois))$m2logL)
mle_zeta <- mle(minus_log_like_zeta,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_par <- c(attributes(summary(mle_zeta))$coef[1],attributes(summary(mle_zeta))$m2logL)
mle_zeta_trunc <- mle(minus_log_like_zeta_trunc,
start = list(gamma = 2),
method = "L-BFGS-B",
lower = c(1.0000001))
zeta_trunc_par <- c(attributes(summary(mle_zeta_trunc))$coef[1],
attributes(summary(mle_zeta_trunc))$m2logL)
df <- data.frame(pois_par,geo_par,zeta_par,zeta_trunc_par)
colnames(df) <- NULL
return(df)
}
# Functions to calculate the AIC
get_AIC <- function(m2logL,K,N){
m2logL + 2*K*N/(N-K-1) # AIC with a correction for sample size
}
AIC_calc <- function(label, m2logL.list,df,x){
AIC.list <- sapply(m2logL.list,get_AIC,K=1,N=length(x))
mle_zeta2 <- 2*minus_log_like_zeta2()
AIC.list <- append(AIC.list,get_AIC(mle_zeta2,0,length(x)),after = 3)
best.AIC <- min(AIC.list)
AIC.list <- AIC.list-best.AIC
df <- rbind(df,data.frame(label,t(AIC.list)))
return(df)
}
param.df <- data.frame() #table with best parameters
AIC.df <- data.frame() #AIC table
for (i in 1:nrow(source)){
x <- read.table(source$file[i], header = FALSE)$V1
param.list <- mle_calc(lang.df$"N/M"[i],lang.df$"M/N"[i],x)
param.df <- rbind(param.df,data.frame(source$language[i], param.list[1,],max(x)))
AIC.df <- AIC_calc(source$language[i],param.list[2,],AIC.df,x)
}
colnames(param.df) <- c("Language", "lambda", "p", "gamma 1","gamma 2","k max")
colnames(AIC.df) <- c("Language", "1", "2", "3", "4", "5")
param.df
print(xtable(param.df), file = "Table Parametri.tex")
AIC.df
print(xtable(AIC.df), file = "Table AIC.tex")
# Plots of distributions vs real data
# Probability functions
#Displaced geometric
geo_dist <- function(p,k){
q <- (1-p)^(k-1)*p
return(q)
}
#Displaced poisson
pois_dist <- function(lambda,k){
p <- (lambda^k) * exp(-lambda) / (factorial(k) * (1 - exp(-lambda)))
}
#Zeta truncated
zetatrunc_dist <- function(k_max,gamma,k){
k^(-gamma)/(sum((1:k_max)^(-gamma)))
}
full_plot <- function(i,label,file,df){
degree_sequence = read.table(file, header = FALSE)
degree_spectrum = data.frame(table(degree_sequence))
#VA SISTEMATO, VANNO MESSI I PUNTINI/DELLE LINEE
plot(degree_spectrum$V1,degree_spectrum$Freq/nrow(degree_sequence),main = label,type="l",
xlab = "degree", ylab = "Proportion of vertices",log="y")
x <- 1:max(degree_sequence)
geo_prob <- sapply(x, geo_dist,p=df$p[i])
lines(x,geo_prob,type="l",col = "blue")
pois_prob <- sapply(x, pois_dist,lambda=df$lambda[i])
lines(x,pois_prob,type="l",col = "green")
zeta_prob <- sapply(x, dzeta, shape = df$`gamma 1`[i])
lines(x,zeta_prob,type="l",col = "red")
zeta2_prob <- sapply(x, dzeta, shape = 2)
lines(x,zeta2_prob,type="l",col = "magenta")
zetatrunc_prob <- sapply(x, zetatrunc_dist, gamma = df$`gamma 2`[i],
k_max = df$`k max`[i])
lines(x,zetatrunc_prob,type="l",col = "orange")
legend("topright", legend = c("Geometric", "Poisson", "Zeta", "Zeta (Lambda=2)", "Zeta truncated"),
col = c("blue","green","red","magenta","orange"), lty = 1, lwd = 2)
}
for (x in 1:nrow(source)){
full_plot(x,source$language[x], source$file[x],param.df)
}
